# -*- coding: utf-8 -*-
"""presentation_pace_and_audio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17ioCtcGVnbC2ofderuKMDtLjQPnke5Dy
"""

from google.colab import drive
drive.mount('/content/drive')

cd 'drive/MyDrive/Grad project'

pip install --upgrade pip setuptools wheel

!apt-get install -y swig libpulse-dev

pip install SpeechRecognition

pip install moviepy

pip install pydub

pip install ffmpeg-python

pip install python-Levenshtein

pip install Distance

pip install fuzzywuzzy

"""Presentation Pace Testing"""

import speech_recognition as sr
import numpy
from moviepy.editor import *
import io
#video to audio
#clip = VideoFileClip("Is Your Inner Genius Being Heard Find Your Fire Pete Lonton  TEDxDerryLondonderry.mp4")
#
#clip.audio.write_audiofile("Audio File1.wav")
from os import path

from pydub import AudioSegment
from pydub.playback import play
from pydub.silence import split_on_silence
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

for i in range(1,51):
  subtitle = "Subtitle "+str(i)+".txt"
  audiof = "Audio "+str(i)+".wav"

  with open(subtitle, 'r') as file:
      data = file.read().replace("\n", " ")
  sound = AudioSegment.from_wav(audiof)


  chunks = split_on_silence(sound, 
      # must be silent for at least half a second
      min_silence_len=500,

      # consider it silent if quieter than -16 dBFS
      silence_thresh=-50
  )

  r = sr.Recognizer()
  ans=""
  print(len(chunks))
  words=1
  for x in chunks:
    b = io.BytesIO()
    x.export(b,format='wav')
    b.seek(0)
    with sr.AudioFile(b) as source:
        audio = r.record(source)  # read the entire audio file
    try:
        # for testing purposes, we're just using the default API key
        # to use another API key, use `r.recognize_google(audio, key="GOOGLE_SPEECH_RECOGNITION_API_KEY")`
        # instead of `r.recognize_google(audio)`
        ans += " "+ r.recognize_google(audio,language='en-US')
        for x in ans:
          if (x.isspace()) == True: 
            words+=1
    except sr.UnknownValueError:
      continue
    except sr.RequestError as e:
        print("Could not request results from Google Speech Recognition service; {0}".format(e))

  partial_score = fuzz.ratio(data, ans)
  token_score = fuzz.token_set_ratio(data, ans)
  print(i, " :  ",partial_score ," ", token_score)
  subtitle=subtitle.replace(str(i),str(i+1))
  audiof=audiof.replace(str(i),str(i+1))
#15  :   89   93
#15  :   91   96

"""Presentation Pace"""

import speech_recognition as sr
import numpy
import io
from pydub import AudioSegment
from pydub.playback import play
from pydub.silence import split_on_silence
#clip = mp.VideoFileClip("Is Your Inner Genius Being Heard Find Your Fire Pete Lonton  TEDxDerryLondonderry.mp4")
#clip.audio.write_audiofile("Audio 1.wav")

# obtain path to "english.wav" in the same folder as this script

from os import path
AUDIO_FILE = "Audio 1.wav"
# AUDIO_FILE = path.join(path.dirname(path.realpath(__file__)), "french.aiff")
# AUDIO_FILE = path.join(path.dirname(path.realpath(__file__)), "chinese.flac")
#
# # use the audio file as the audio source
# pDetection = aubio.pitch("default", 2048,2048//2, 44100)
 # Set unit.
# pDetection.set_unit("Hz")
# pDetection.set_silence(-40)

sound = AudioSegment.from_wav(AUDIO_FILE)

chunks = split_on_silence(sound, 
    # must be silent for at least half a second
    min_silence_len=500,

    # consider it silent if quieter than -16 dBFS
    silence_thresh=-50
)

r = sr.Recognizer()
ans=""
words=1
for x in chunks:
  b = io.BytesIO()
  x.export(b,format='wav')
  b.seek(0)
  with sr.AudioFile(b) as source:
      audio = r.record(source)  # read the entire audio file
  try:
      # for testing purposes, we're just using the default API key
      # to use another API key, use `r.recognize_google(audio, key="GOOGLE_SPEECH_RECOGNITION_API_KEY")`
      # instead of `r.recognize_google(audio)`
      ans += " "+ r.recognize_google(audio,language='en-US')
      words+=len(ans.split())
  except sr.UnknownValueError:
    continue
  except sr.RequestError as e:
      print("Could not request results from Google Speech Recognition service; {0}".format(e))

"""Adequate Voice OUTPUT"""

import librosa as lp
import matplotlib.pyplot as plt
import numpy as np
y,freq=lp.load(r"Audio 1.wav")

#print(y,freq)
#print(max(y))
time = np.arange(0,len(y))/freq
#print(len(time))
fig, ax = plt.subplots()
ax.plot(time,y)
ax.set(xlabel='Time(s)',ylabel='sound amplitude')
plt.show()
lp.get_duration(y,freq)

#print(len(y))

# Thresh hold 
count=0
arr= y <= max(y)*(3/4)
for x in arr:
  if(x):
    count+=x
print("count: "+str(count/len(y)*100))

"""Presentation pace OUTPUT"""

import math
# represents a signal in the time-frequency domain by computing discrete Fourier transforms (DFT) over short overlapping windows. 
# This function returns a complex-valued matrix D such that.
S = lp.stft(y)
# np.abs(D[f, t]) is the magnitude of frequency bin f at frame t, and

# allDB = lp.amplitude_to_db(np.abs(S),ref=np.max)
allDB = lp.amplitude_to_db(np.abs(S))
test = lp.effects.split(y, top_db=20)
yt, index = lp.effects.trim(y,top_db=20)
audio_time_without_silance = math.ceil(lp.get_duration(yt))
average = words/audio_time_without_silance
print(str(math.ceil(average))+ " WPM")
if (average>=150):
  print("You talking too fast.")
elif (average>=120 and average <=150):
  print("Perfect WPM.")
elif (average <120):
  print("You talking very slow.")